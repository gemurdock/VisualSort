{"version":3,"sources":["components/ArrayVisualizer.tsx","sorters/BubbleSort.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["calcView","length","useableWidth","VIEWBOX_WIDTH","maxItems","Math","floor","rectPad","max","MIN_PAD","rectWidth","rectStartX","maxRectHeight","VIEWBOX_HEIGHT","ArrayVisualizer","props","useState","list","original","viewSpecs","setViewSpecs","useEffect","handleMaxItems","handleMaxValue","rects","items","defaultRectStyle","fill","width","scaled","min","normalized","i","map","item","index","x","y","height","style","buildSVGRects","className","viewBox","BubbleSort","AlgorithmState","input","state","nextInput","nextState","completedIndex","isDone","tmp","App","setState","values","Array","random","maxHeight","intervalCall","swapCount","applicationState","PAUSED","internalSortState","interval","setInterval","nextSortState","this","clearInterval","RUNNING","result","RESET","Container","Row","Col","Button","variant","onClick","setAppState","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a0b7298.chunk.js","sourcesContent":["import { CSSProperties, useEffect, useState } from 'react';\r\nimport './ArrayVisualizer.css';\r\n\r\nexport interface ProcessedValues {\r\n    original: number[],\r\n    scaled: number[]\r\n}\r\n\r\ninterface ViewSpecs {\r\n    rectStartX: number;\r\n    rectWidth: number;\r\n    rectPad: number;\r\n    maxRectHeight: number;\r\n    maxItems: number; // 119 @ 1200 width\r\n}\r\n\r\nconst VIEWBOX_WIDTH = 1200;\r\nconst VIEWBOX_HEIGHT = 675;\r\nconst MIN_RECT_WIDTH = 5;\r\nconst MIN_RECT_HEIGHT = 3;\r\nconst MIN_RECT_PAD = 2.5;\r\nconst MIN_PAD = 1; // min for each side\r\nconst PAD_PERCENT = 0.1;\r\n\r\nfunction calcView(length: number): ViewSpecs {\r\n    let useableWidth = VIEWBOX_WIDTH - (MIN_PAD * 2);\r\n    let useableHeight = VIEWBOX_HEIGHT - (MIN_PAD * 2);\r\n    let maxItems = Math.floor(useableWidth / (MIN_RECT_PAD * 2 + MIN_RECT_WIDTH));\r\n    let rectPad = Math.max(MIN_PAD * 2, (useableWidth / length) * PAD_PERCENT);\r\n    let rectWidth = (useableWidth - (rectPad * length)) / length;\r\n    let rectStartX = (rectPad / 2) + (rectWidth / 2);\r\n    return {\r\n        rectStartX,\r\n        rectWidth,\r\n        rectPad,\r\n        maxRectHeight: useableHeight,\r\n        maxItems\r\n    }\r\n}\r\n\r\nfunction buildSVGRects(items: ProcessedValues, viewSpecs: ViewSpecs): JSX.Element[] {\r\n    let defaultRectStyle: CSSProperties = {\r\n        fill: 'rgb(66, 135, 245)',\r\n        width: `${viewSpecs.rectWidth}px`\r\n    };\r\n    if(items.scaled.length !== items.original.length) {\r\n        const min = Math.min(...items.original);\r\n        const max = Math.max(...items.original);\r\n        let normalized = [...items.original];\r\n        for(let i = 0; i < normalized.length; i++) {\r\n            normalized[i] = (normalized[i] - min) / (max - min); // normalize\r\n            normalized[i] = normalized[i] * viewSpecs.maxRectHeight; // scale\r\n            if(normalized[i] < MIN_RECT_HEIGHT) { // ensure each item is visible\r\n                normalized[i] = MIN_RECT_HEIGHT; // TODO: fix min scale issue, 0 !== 1 !== 2, !== 3... ect\r\n            }\r\n        }\r\n        items.scaled = normalized;\r\n    }\r\n    return items.scaled.map((item, index) => {\r\n        return (\r\n            <rect key={`${index}`}\r\n                x={viewSpecs.rectPad / 2 + (viewSpecs.rectPad + viewSpecs.rectWidth) * index}\r\n                y={VIEWBOX_HEIGHT - item} height={item} style={defaultRectStyle} />\r\n        )\r\n    });\r\n}\r\n\r\nfunction ArrayVisualizer(props: { width: number, height: number, list: ProcessedValues, handleMaxItems: (max: number) => void,\r\n        handleMaxValue: (max: number) => void }) {\r\n    const [viewSpecs, setViewSpecs] = useState<ViewSpecs>(calcView(props.list.original.length));\r\n\r\n    useEffect(() => {\r\n        setViewSpecs(calcView(props.list.original.length));\r\n    }, [props]);\r\n\r\n    useEffect(() => {\r\n        props.handleMaxItems(viewSpecs.maxItems);\r\n        props.handleMaxValue(viewSpecs.maxRectHeight);\r\n    }, [viewSpecs]);\r\n\r\n    let rects = buildSVGRects(props.list, viewSpecs);\r\n\r\n    return (\r\n        <div>\r\n            <svg className=\".svg-view\" viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`} width={`${props.width}`} height={`${props.height}`}>\r\n                { rects }\r\n                Warning: Your browser does not support SVG.\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArrayVisualizer;\r\n","/**\r\n * Bubble Sort\r\n * \r\n * Changes the state of input array to the next state of output array after a single cycle.\r\n */\r\n\r\nexport interface BubbleSortState {\r\n    index: number;\r\n    completedIndex: number;\r\n    isDone: boolean;\r\n}\r\n\r\nfunction BubbleSort(input: number[], state: BubbleSortState): [number[], BubbleSortState] {\r\n    let nextInput = [...input];\r\n\r\n    let nextState = null;\r\n    if(state.completedIndex === -1) { // set state if state === undefined\r\n        nextState = {\r\n            index: 0,\r\n            completedIndex: nextInput.length,\r\n            isDone: false\r\n        };\r\n    } else {\r\n        nextState = {...state};\r\n    }\r\n\r\n    if(nextState.isDone) {\r\n        return [nextInput, nextState];\r\n    }\r\n\r\n    if(nextInput[nextState.index] > nextInput[nextState.index + 1]) { // swap is out of order\r\n        let tmp = nextInput[nextState.index];\r\n        nextInput[nextState.index] = nextInput[nextState.index + 1];\r\n        nextInput[nextState.index + 1] = tmp;\r\n    }\r\n\r\n    nextState.index += 1;\r\n    if(nextState.index > nextInput.length - 2 || nextState.index >= nextState.completedIndex) { // '-2' since -1 since index starts at 0 && index should not go to last element\r\n        nextState.index = 0;\r\n        nextState.completedIndex -= 1;\r\n        if(nextState.completedIndex === 0) {\r\n            nextState.isDone = true;\r\n        }\r\n    }\r\n\r\n    return [nextInput, nextState];\r\n}\r\n\r\nexport default BubbleSort;","import React from 'react';\nimport { Container, Row, Col, Button } from 'react-bootstrap';\nimport ArrayVisualizer, { ProcessedValues } from './components/ArrayVisualizer';\nimport './App.css';\nimport BubbleSort, { BubbleSortState } from './sorters/BubbleSort';\n\nenum AlgorithmState {\n    PAUSED,\n    RUNNING,\n    RESET\n}\n\ninterface AppProps {\n\n}\n\ninterface AppState {\n    maxItems: number;\n    maxHeight: number;\n    intervalCall: NodeJS.Timeout | null;\n    values: number[];\n    swapCount: number;\n    internalSortState: BubbleSortState;\n    applicationState: AlgorithmState\n};\n\nclass App extends React.Component<AppProps, AppState> {\n    constructor(props: AppProps) {\n        super(props);\n        this.state = {\n            maxItems: 0,\n            maxHeight: 0,\n            intervalCall: null,\n            values: [],\n            swapCount: 0,\n            applicationState: AlgorithmState.PAUSED,\n            internalSortState: {index: 0, completedIndex: -1, isDone: false}\n        };\n    }\n\n    componentDidMount() {\n        let interval = setInterval(() => {\n            this.nextSortState();\n        }, 10);\n        this.setState({\n            ...this.state,\n            intervalCall: interval\n        });\n    }\n\n    componentWillUnmount() {\n        if(this.state.intervalCall) {\n            clearInterval(this.state.intervalCall);\n        }\n    }\n\n    nextSortState() {\n        if(this.state.applicationState === AlgorithmState.RUNNING) {\n            let result = BubbleSort(this.state.values, this.state.internalSortState);\n            if(result[1].isDone === true) {\n                this.setState({...this.state, applicationState: AlgorithmState.PAUSED});\n            }\n            this.setState({...this.state, values: result[0], internalSortState: result[1], swapCount: this.state.swapCount + 1});\n        } else if(this.state.applicationState === AlgorithmState.RESET) {\n            this.setState({\n                ...this.state,\n                values: [...Array(this.state.maxItems)].map(() => Math.floor(Math.random() * 100 + 1)),\n                swapCount: 0,\n                internalSortState: {index: 0, completedIndex: -1, isDone: false},\n                applicationState: AlgorithmState.PAUSED\n            });\n        }\n    }\n\n    setAppState(state: AlgorithmState) {\n        this.setState({...this.state, applicationState: state});\n    }\n\n    handleMaxItems = (max: number): void => {\n        if(max > 100) { // TODO: move this to array visualizer\n            max = 100;\n        }\n        if(max !== this.state.maxItems) {\n            this.setState({\n                ...this.state,\n                maxItems: max,\n                values: [...Array(max)].map(() => Math.floor(Math.random() * 100 + 1))\n            });\n        }\n    }\n\n    handleMaxValue = (max: number): void => {\n        if(max !== this.state.maxHeight) {\n            this.setState({\n                ...this.state,\n                maxHeight: max\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Container>\n                    <Row className=\"text-center m-3\">\n                        <Col>\n                            <span className=\"app-text\">Comparisons: {this.state.swapCount}</span>\n                        </Col>\n                    </Row>\n                    <Row className=\"text-center m-3\">\n                        <Col>\n                            <ArrayVisualizer list={ { original: this.state.values, scaled: [] } }\n                                width={1000} height={600}\n                                handleMaxItems={this.handleMaxItems} handleMaxValue={this.handleMaxValue} />\n                        </Col>\n                    </Row>\n                    <Row className=\"text-center m-3\">\n                        <Col>\n                            <Row>\n                                <Col>\n                                    <Button variant=\"primary\" onClick={() => this.setAppState(AlgorithmState.RUNNING)}>Start</Button>\n                                </Col>\n                                <Col>\n                                    <Button variant=\"secondary\" onClick={() => this.setAppState(AlgorithmState.PAUSED)}>Stop</Button>\n                                </Col>\n                                <Col>\n                                    <Button variant=\"secondary\" onClick={() => this.setAppState(AlgorithmState.RESET)}>Reset</Button>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        )\n    };\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}