{"version":3,"sources":["components/ArrayVisualizer.tsx","sorters/BubbleSort.tsx","App.tsx","lib/helpers.tsx","reportWebVitals.ts","index.tsx"],"names":["calcView","length","useableWidth","VIEWBOX_WIDTH","maxItems","Math","floor","rectPad","max","MIN_PAD","rectWidth","rectStartX","maxRectHeight","VIEWBOX_HEIGHT","getIndexStyle","index","highlightMeta","focusMeta","defaultRectStyle","fill","width","highlightedRectStyle","Object","keys","includes","ArrayVisualizer","props","useState","list","original","viewSpecs","setViewSpecs","useEffect","handleMaxItems","handleMaxValue","rects","items","scaled","min","normalized","i","map","item","x","y","height","style","buildSVGRects","className","viewBox","BubbleSort","AlgorithmState","input","state","nextInput","nextState","completedIndex","isDone","comparisons","swaps","tmp","isNumeric","str","Number","isNaN","App","setState","itemCount","values","Array","random","maxHeight","handleItemChange","event","target","value","n","parseInt","applicationState","RESET","preventDefault","handleSlider","speed","history","intervalCall","comparisonsCount","swapCount","startTime","totalTime","PAUSED","internalSortState","interval","setInterval","calcTime","ms","Date","getTime","time","nextSortState","this","clearInterval","RUNNING","result","timePassed","getTotalTime","key1","key2","Container","Row","Col","Button","variant","onClick","setAppState","type","name","step","onChange","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.38bb3042.chunk.js","sourcesContent":["import { CSSProperties, useEffect, useState } from 'react';\r\nimport './ArrayVisualizer.css';\r\nimport { ProcessedValues } from '../lib/interfaces';\r\nimport { ArrayMetaData } from '../lib/types';\r\n\r\ninterface ViewSpecs {\r\n    rectStartX: number;\r\n    rectWidth: number;\r\n    rectPad: number;\r\n    maxRectHeight: number;\r\n    maxItems: number; // 119 @ 1200 width\r\n}\r\n\r\ninterface ArrayVisualizerProps {\r\n    width: number,\r\n    height: number,\r\n    list: ProcessedValues,\r\n    highlightMeta: ArrayMetaData<Boolean>,\r\n    focusMeta: ArrayMetaData<Boolean>,\r\n    handleMaxItems: (max: number) => void,\r\n    handleMaxValue: (max: number) => void\r\n}\r\n\r\nconst VIEWBOX_WIDTH = 1200;\r\nconst VIEWBOX_HEIGHT = 675;\r\nconst MIN_RECT_WIDTH = 5;\r\nconst MIN_RECT_HEIGHT = 3;\r\nconst MIN_RECT_PAD = 2.5;\r\nconst MIN_PAD = 1; // min for each side\r\nconst PAD_PERCENT = 0.1;\r\n\r\nfunction calcView(length: number): ViewSpecs {\r\n    let useableWidth = VIEWBOX_WIDTH - (MIN_PAD * 2);\r\n    let useableHeight = VIEWBOX_HEIGHT - (MIN_PAD * 2);\r\n    let maxItems = Math.floor(useableWidth / (MIN_RECT_PAD * 2 + MIN_RECT_WIDTH));\r\n    let rectPad = Math.max(MIN_PAD * 2, (useableWidth / length) * PAD_PERCENT);\r\n    let rectWidth = (useableWidth - (rectPad * length)) / length;\r\n    let rectStartX = (rectPad / 2) + (rectWidth / 2);\r\n    return {\r\n        rectStartX,\r\n        rectWidth,\r\n        rectPad,\r\n        maxRectHeight: useableHeight,\r\n        maxItems\r\n    }\r\n}\r\n\r\nfunction getIndexStyle(index: number, highlightMeta: ArrayMetaData<Boolean>, focusMeta: ArrayMetaData<Boolean>, rectWidth: number): CSSProperties {\r\n    let defaultRectStyle: CSSProperties = {\r\n        fill: 'rgb(66, 135, 245)',\r\n        width: `${rectWidth}px`\r\n    };\r\n    let highlightedRectStyle: CSSProperties = {\r\n        fill: 'rgb(219, 132, 39)',\r\n        width: `${rectWidth}`\r\n    }\r\n    return Object.keys(highlightMeta).includes(`${index}`) ? highlightedRectStyle : defaultRectStyle;\r\n}\r\n\r\nfunction buildSVGRects(items: ProcessedValues, viewSpecs: ViewSpecs, highlightMeta: ArrayMetaData<Boolean>, focusMeta: ArrayMetaData<Boolean>): JSX.Element[] {\r\n    if(items.scaled.length !== items.original.length) {\r\n        const min = Math.min(...items.original);\r\n        const max = Math.max(...items.original);\r\n        let normalized = [...items.original];\r\n        for(let i = 0; i < normalized.length; i++) {\r\n            normalized[i] = (normalized[i] - min) / (max - min); // normalize\r\n            normalized[i] = normalized[i] * viewSpecs.maxRectHeight; // scale\r\n            if(normalized[i] < MIN_RECT_HEIGHT) { // ensure each item is visible\r\n                normalized[i] = MIN_RECT_HEIGHT; // TODO: fix min scale issue, 0 !== 1 !== 2, !== 3... ect\r\n            }\r\n        }\r\n        items.scaled = normalized;\r\n    }\r\n    return items.scaled.map((item, index) => {\r\n        return (\r\n            <rect key={`${index}`}\r\n                x={viewSpecs.rectPad / 2 + (viewSpecs.rectPad + viewSpecs.rectWidth) * index}\r\n                y={VIEWBOX_HEIGHT - item} height={item} style={getIndexStyle(index, highlightMeta, focusMeta, viewSpecs.rectWidth)} />\r\n        )\r\n    });\r\n}\r\n\r\nfunction ArrayVisualizer(props: ArrayVisualizerProps) {\r\n    const [viewSpecs, setViewSpecs] = useState<ViewSpecs>(calcView(props.list.original.length));\r\n\r\n    useEffect(() => {\r\n        setViewSpecs(calcView(props.list.original.length));\r\n    }, [props]);\r\n\r\n    useEffect(() => {\r\n        props.handleMaxItems(viewSpecs.maxItems);\r\n        props.handleMaxValue(viewSpecs.maxRectHeight);\r\n    }, [viewSpecs]);\r\n\r\n    let rects = buildSVGRects(props.list, viewSpecs, props.highlightMeta, props.focusMeta);\r\n\r\n    return (\r\n        <div>\r\n            <svg className=\".svg-view\" viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`} width={`${props.width}`} height={`${props.height}`}>\r\n                { rects }\r\n                Warning: Your browser does not support SVG.\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArrayVisualizer;\r\n","/**\r\n * Bubble Sort\r\n * \r\n * Changes the state of input array to the next state of output array after a single cycle.\r\n */\r\n\r\nexport interface BubbleSortState {\r\n    index: number;\r\n    completedIndex: number;\r\n    isDone: boolean;\r\n    comparisons: number;\r\n    swaps: number;\r\n}\r\n\r\nfunction BubbleSort(input: number[], state: BubbleSortState): [number[], BubbleSortState] {\r\n    let nextInput = [...input];\r\n\r\n    let nextState = null;\r\n    if(state.completedIndex === -1) { // set state if state === undefined\r\n        nextState = {\r\n            index: 0,\r\n            completedIndex: nextInput.length,\r\n            isDone: false,\r\n            comparisons: 0,\r\n            swaps: 0\r\n        };\r\n    } else {\r\n        nextState = {...state};\r\n    }\r\n\r\n    if(nextState.isDone) {\r\n        return [nextInput, nextState];\r\n    }\r\n\r\n    if(nextInput[nextState.index] > nextInput[nextState.index + 1]) { // swap is out of order\r\n        let tmp = nextInput[nextState.index];\r\n        nextInput[nextState.index] = nextInput[nextState.index + 1];\r\n        nextInput[nextState.index + 1] = tmp;\r\n        nextState.swaps += 1;\r\n    }\r\n\r\n    nextState.index += 1;\r\n    nextState.comparisons += 1;\r\n    if(nextState.index > nextInput.length - 2 || nextState.index >= nextState.completedIndex) { // '-2' since -1 since index starts at 0 && index should not go to last element\r\n        nextState.index = 0;\r\n        nextState.completedIndex -= 1;\r\n        if(nextState.completedIndex === 0) {\r\n            nextState.isDone = true;\r\n        }\r\n    }\r\n\r\n    return [nextInput, nextState];\r\n}\r\n\r\nexport default BubbleSort;","import React from 'react';\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport ArrayVisualizer from './components/ArrayVisualizer';\r\nimport { ProcessedValues, HistoryObject } from './lib/interfaces';\r\nimport { ArrayMetaData } from './lib/types';\r\nimport './App.css';\r\nimport BubbleSort, { BubbleSortState } from './sorters/BubbleSort';\r\nimport { isNumeric } from './lib/helpers';\r\n\r\nenum AlgorithmState {\r\n    PAUSED,\r\n    RUNNING,\r\n    RESET\r\n}\r\n\r\ninterface AppProps {\r\n\r\n}\r\n\r\ninterface AppState {\r\n    history: HistoryObject[];\r\n    maxItems: number;\r\n    itemCount: number;\r\n    speed: number;\r\n    maxHeight: number;\r\n    intervalCall: NodeJS.Timeout | null;\r\n    values: number[];\r\n    comparisonsCount: number;\r\n    swapCount: number;\r\n    startTime: number | null;\r\n    totalTime: number;\r\n    internalSortState: BubbleSortState;\r\n    applicationState: AlgorithmState\r\n};\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n    constructor(props: AppProps) {\r\n        super(props);\r\n        this.state = {\r\n            history: [],\r\n            maxItems: 0,\r\n            itemCount: 0,\r\n            speed: 50,\r\n            maxHeight: 0,\r\n            intervalCall: null,\r\n            values: [],\r\n            comparisonsCount: 0,\r\n            swapCount: 0,\r\n            startTime: null,\r\n            totalTime: 0,\r\n            applicationState: AlgorithmState.PAUSED,\r\n            internalSortState: {index: 0, completedIndex: -1, isDone: false, comparisons: 0, swaps: 0}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let interval = setInterval(() => {\r\n            this.calcTime();\r\n            const ms = 1000 / ((this.state.speed / 100) * 50); // how many ms before next sort state\r\n            if(this.state.history.length === 0 || new Date().getTime() - this.state.history[this.state.history.length - 1].time >= ms) {\r\n                this.nextSortState();\r\n            }\r\n        }, 3);\r\n        this.setState({\r\n            ...this.state,\r\n            intervalCall: interval\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if(this.state.intervalCall) {\r\n            clearInterval(this.state.intervalCall);\r\n        }\r\n    }\r\n\r\n    calcTime() {\r\n        if(this.state.applicationState === AlgorithmState.RUNNING && this.state.startTime === null) {\r\n            this.setState({...this.state, startTime: new Date().getTime()});\r\n        } else if(this.state.applicationState === AlgorithmState.PAUSED && this.state.startTime !== null) {\r\n            let totalTime = this.state.totalTime + (new Date().getTime() - this.state.startTime);\r\n            this.setState({...this.state, startTime: null, totalTime});\r\n        } else if(this.state.applicationState === AlgorithmState.RESET) {\r\n            this.setState({...this.state, startTime: null, totalTime: 0});\r\n        }\r\n    }\r\n\r\n    getTotalTime(): string {\r\n        let totalTime = this.state.totalTime;\r\n        if(this.state.startTime !== null) {\r\n            totalTime += new Date().getTime() - this.state.startTime;\r\n        }\r\n        totalTime = Math.floor(totalTime / 1000);\r\n        return `${totalTime}s`;\r\n    }\r\n\r\n    nextSortState() {\r\n        if(this.state.applicationState === AlgorithmState.RUNNING) {\r\n            let result = BubbleSort(this.state.values, this.state.internalSortState);\r\n            if(result[1].isDone === true) {\r\n                this.setState({...this.state, applicationState: AlgorithmState.PAUSED});\r\n            }\r\n            let highlightMeta: ArrayMetaData<boolean> = {};\r\n            highlightMeta[`${result[1].index}`] = true;\r\n            highlightMeta[`${result[1].index + 1}`] = true;\r\n            this.setState({...this.state, values: result[0], internalSortState: result[1], comparisonsCount: result[1].comparisons, swapCount: result[1].swaps,\r\n                history: [\r\n                    ...this.state.history,\r\n                    {\r\n                        time: new Date().getTime(),\r\n                        state: { original: [...result[0]], scaled: [] },\r\n                        highlightMeta,\r\n                        comparisons: result[1].comparisons,\r\n                        swaps: result[1].swaps,\r\n                        timePassed: this.getTotalTime()\r\n                    }\r\n                ]});\r\n        } else if(this.state.applicationState === AlgorithmState.RESET) {\r\n            this.setState({\r\n                ...this.state,\r\n                history: [],\r\n                values: [...Array(this.state.itemCount)].map(() => Math.floor(Math.random() * 100 + 1)),\r\n                comparisonsCount: 0,\r\n                swapCount: 0,\r\n                internalSortState: {index: 0, completedIndex: -1, isDone: false, comparisons: 0, swaps: 0},\r\n                applicationState: AlgorithmState.PAUSED\r\n            });\r\n        }\r\n    }\r\n\r\n    setAppState(state: AlgorithmState) {\r\n        this.setState({...this.state, applicationState: state});\r\n    }\r\n\r\n    handleMaxItems = (max: number): void => {\r\n        if(max > 100) { // TODO: move this to array visualizer\r\n            max = 100;\r\n        }\r\n        if(max !== this.state.maxItems) {\r\n            this.setState({\r\n                ...this.state,\r\n                maxItems: max,\r\n                itemCount: max,\r\n                values: [...Array(max)].map(() => Math.floor(Math.random() * 100 + 1))\r\n            });\r\n        }\r\n    }\r\n\r\n    handleMaxValue = (max: number): void => {\r\n        if(max !== this.state.maxHeight) {\r\n            this.setState({\r\n                ...this.state,\r\n                maxHeight: max\r\n            })\r\n        }\r\n    }\r\n\r\n    handleItemChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        if(isNumeric(event.target.value)) {\r\n            let n = parseInt(event.target.value);\r\n            if(n >= 5 && n <= this.state.maxItems) {\r\n                this.setState({\r\n                    ...this.state,\r\n                    itemCount: n,\r\n                    applicationState: AlgorithmState.RESET\r\n                });\r\n            } else {\r\n                event.preventDefault();\r\n            }\r\n        } else {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleSlider = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        if(isNumeric(event.target.value)) {\r\n            this.setState({\r\n                ...this.state,\r\n                speed: parseInt(event.target.value)\r\n            });\r\n        } else {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let key1 = `${this.state.internalSortState.index}`; // TODO: put metadata generation inside algorithm\r\n        let key2 = `${this.state.internalSortState.index + 1}`;\r\n        let highlightMeta: ArrayMetaData<Boolean> = {};\r\n        highlightMeta[key1] = true;\r\n        highlightMeta[key2] = true;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Container>\r\n                    <Row className=\"text-center m-3\">\r\n                        <Col>\r\n                            <span className=\"app-text\">Comparisons: {this.state.comparisonsCount}</span>\r\n                        </Col>\r\n                        <Col>\r\n                            <span className=\"app-text\">Swaps: {this.state.swapCount}</span>\r\n                        </Col>\r\n                        <Col>\r\n                            <span className=\"app-text\">Time: {this.getTotalTime()}</span>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"text-center m-3\">\r\n                        <Col>\r\n                            <ArrayVisualizer list={ { original: this.state.values, scaled: [] } }\r\n                                width={1000} height={600} highlightMeta={highlightMeta} focusMeta={{}}\r\n                                handleMaxItems={this.handleMaxItems} handleMaxValue={this.handleMaxValue} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"text-center m-3\">\r\n                        <Col>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Button variant=\"primary\" onClick={() => this.setAppState(AlgorithmState.RUNNING)}>Start</Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button variant=\"secondary\" onClick={() => this.setAppState(AlgorithmState.PAUSED)}>Stop</Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button variant=\"secondary\" onClick={() => this.setAppState(AlgorithmState.RESET)}>Reset</Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <input type=\"number\" className=\"elements-counter\" name=\"elements\" step=\"5\" value={this.state.itemCount} onChange={this.handleItemChange} />\r\n                                </Col>\r\n                                <Col>\r\n                                    <input type=\"range\" min=\"1\" max=\"100\" value={this.state.speed} onChange={this.handleSlider} />\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default App;\r\n","export function isNumeric(str: string): boolean {\r\n    if(typeof str !== \"string\") {\r\n        return false;\r\n    }\r\n    return !Number.isNaN(Number(str));\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}