{"version":3,"sources":["components/ArrayVisualizer.tsx","sorters/BubbleSort.tsx","App.tsx","lib/helpers.tsx","reportWebVitals.ts","index.tsx"],"names":["calcView","length","useableWidth","VIEWBOX_WIDTH","maxItems","Math","floor","rectPad","max","MIN_PAD","rectWidth","rectStartX","maxRectHeight","VIEWBOX_HEIGHT","getIndexStyle","index","highlightMeta","focusMeta","defaultRectStyle","fill","width","highlightedRectStyle","Object","keys","includes","ArrayVisualizer","props","useState","list","original","viewSpecs","setViewSpecs","useEffect","handleMaxItems","handleMaxValue","rects","items","scaled","min","normalized","i","map","item","x","y","height","style","buildSVGRects","className","viewBox","BubbleSort","AlgorithmState","RandomArrayType","input","state","nextInput","nextState","completedIndex","isDone","comparisons","swaps","tmp","isNumeric","str","Number","isNaN","App","setState","itemCount","values","getRandArray","maxHeight","handleItemChange","event","target","value","n","parseInt","applicationState","RESET","preventDefault","handleSlider","speed","handleDropDown","parsedValue","arrayType","history","RANDOM","intervalCall","comparisonsCount","swapCount","startTime","totalTime","PAUSED","internalSortState","interval","setInterval","calcTime","ms","Date","getTime","time","nextSortState","this","clearInterval","RUNNING","result","timePassed","getTotalTime","NEARLY_SORTED","array","Array","from","v","openIndices","ceil","rand","random","splice","index2","FEW_UNIQUE","maxRepeat","repeatValue","push","j","shuffleArray","REVERSED","key1","key2","Container","Row","Col","Button","variant","onClick","setAppState","type","name","step","onChange","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UA+BA,SAASA,EAASC,GACd,IAAIC,EAAeC,KAEfC,EAAWC,KAAKC,MAAMJ,OACtBK,EAAUF,KAAKG,IAAIC,EAAcP,EAAeD,EANpC,IAOZS,GAAaR,EAAgBK,EAAUN,GAAWA,EAEtD,MAAO,CACHU,WAFcJ,EAAU,EAAMG,EAAY,EAG1CA,YACAH,UACAK,cATgBC,IAUhBT,YAIR,SAASU,EAAcC,EAAeC,EAAuCC,EAAmCP,GAC5G,IAAIQ,EAAkC,CAClCC,KAAM,oBACNC,MAAM,GAAD,OAAKV,EAAL,OAELW,EAAsC,CACtCF,KAAM,oBACNC,MAAM,GAAD,OAAKV,IAEd,OAAOY,OAAOC,KAAKP,GAAeQ,SAA3B,UAAuCT,IAAWM,EAAuBH,EAkDrEO,MAxBf,SAAyBC,GAA8B,IAAD,EAChBC,mBAAoB3B,EAAS0B,EAAME,KAAKC,SAAS5B,SADjC,mBAC3C6B,EAD2C,KAChCC,EADgC,KAGlDC,qBAAU,WACND,EAAa/B,EAAS0B,EAAME,KAAKC,SAAS5B,WAC3C,CAACyB,IAEJM,qBAAU,WACNN,EAAMO,eAAeH,EAAU1B,UAC/BsB,EAAMQ,eAAeJ,EAAUlB,iBAChC,CAACkB,IAEJ,IAAIK,EAnCR,SAAuBC,EAAwBN,EAAsBd,EAAuCC,GACxG,GAAGmB,EAAMC,OAAOpC,SAAWmC,EAAMP,SAAS5B,OAAQ,CAI9C,IAHA,IAAMqC,EAAMjC,KAAKiC,IAAL,MAAAjC,KAAI,YAAQ+B,EAAMP,WACxBrB,EAAMH,KAAKG,IAAL,MAAAH,KAAI,YAAQ+B,EAAMP,WAC1BU,EAAU,YAAOH,EAAMP,UACnBW,EAAI,EAAGA,EAAID,EAAWtC,OAAQuC,IAClCD,EAAWC,IAAMD,EAAWC,GAAKF,IAAQ9B,EAAM8B,GAC/CC,EAAWC,GAAKD,EAAWC,GAAKV,EAAUlB,cACvC2B,EAAWC,GAzCF,IA0CRD,EAAWC,GA1CH,GA6ChBJ,EAAMC,OAASE,EAEnB,OAAOH,EAAMC,OAAOI,KAAI,SAACC,EAAM3B,GAC3B,OACI,sBACI4B,EAAGb,EAAUvB,QAAU,GAAKuB,EAAUvB,QAAUuB,EAAUpB,WAAaK,EACvE6B,EArDO,IAqDaF,EAAMG,OAAQH,EAAMI,MAAOhC,EAAcC,EAAOC,EAAeC,EAAWa,EAAUpB,YAF5G,UAAcK,OAmBVgC,CAAcrB,EAAME,KAAME,EAAWJ,EAAMV,cAAeU,EAAMT,WAE5E,OACI,8BACI,sBAAK+B,UAAU,YAAYC,QAAO,cA3ExB,KA2EwB,YA1EvB,KA0EmE7B,MAAK,UAAKM,EAAMN,OAASyB,OAAM,UAAKnB,EAAMmB,QAAxH,UACMV,EADN,oD,MC5CGe,IC7CVC,EAMAC,EDuCUF,EAxCf,SAAoBG,EAAiBC,GACjC,IAAIC,EAAS,YAAOF,GAEhBG,EAAY,KAahB,IAXIA,GADyB,IAA1BF,EAAMG,eACO,CACR1C,MAAO,EACP0C,eAAgBF,EAAUtD,OAC1ByD,QAAQ,EACRC,YAAa,EACbC,MAAO,GAGF,eAAON,IAGPI,OACT,MAAO,CAACH,EAAWC,GAGvB,GAAGD,EAAUC,EAAUzC,OAASwC,EAAUC,EAAUzC,MAAQ,GAAI,CAC5D,IAAI8C,EAAMN,EAAUC,EAAUzC,OAC9BwC,EAAUC,EAAUzC,OAASwC,EAAUC,EAAUzC,MAAQ,GACzDwC,EAAUC,EAAUzC,MAAQ,GAAK8C,EACjCL,EAAUI,OAAS,EAavB,OAVAJ,EAAUzC,OAAS,EACnByC,EAAUG,aAAe,GACtBH,EAAUzC,MAAQwC,EAAUtD,OAAS,GAAKuD,EAAUzC,OAASyC,EAAUC,kBACtED,EAAUzC,MAAQ,EAClByC,EAAUC,gBAAkB,EACI,IAA7BD,EAAUC,iBACTD,EAAUE,QAAS,IAIpB,CAACH,EAAWC,IEnDhB,SAASM,EAAUC,GACtB,MAAkB,kBAARA,IAGFC,OAAOC,MAAMD,OAAOD,K,SDK3BZ,O,mBAAAA,I,qBAAAA,I,kBAAAA,M,cAMAC,O,mBAAAA,I,iCAAAA,I,2BAAAA,I,wBAAAA,M,SAsSUc,E,kDAzQX,WAAYxC,GAAkB,IAAD,8BACzB,cAAMA,IAqIVO,eAAiB,SAACzB,GACXA,EAAM,MACLA,EAAM,KAEPA,IAAQ,EAAK8C,MAAMlD,UAClB,EAAK+D,SAAL,2BACO,EAAKb,OADZ,IAEIlD,SAAUI,EACV4D,UAAW5D,KACZ,WACC,EAAK2D,SAAL,2BACO,EAAKb,OADZ,IAEIe,OAAQ,EAAKC,sBAlJA,EAwJ7BpC,eAAiB,SAAC1B,GACXA,IAAQ,EAAK8C,MAAMiB,WAClB,EAAKJ,SAAL,2BACO,EAAKb,OADZ,IAEIiB,UAAW/D,MA5JM,EAiK7BgE,iBAAmB,SAACC,GAChB,GAAGX,EAAUW,EAAMC,OAAOC,OAAQ,CAC9B,IAAIC,EAAIC,SAASJ,EAAMC,OAAOC,OAC3BC,GAAK,GAAKA,GAAK,EAAKtB,MAAMlD,SACzB,EAAK+D,SAAL,2BACO,EAAKb,OADZ,IAEIc,UAAWQ,EACXE,iBAAkB3B,EAAe4B,SAGrCN,EAAMO,sBAGVP,EAAMO,kBA9Ke,EAkL7BC,aAAe,SAACR,GACTX,EAAUW,EAAMC,OAAOC,OACtB,EAAKR,SAAL,2BACO,EAAKb,OADZ,IAEI4B,MAAOL,SAASJ,EAAMC,OAAOC,UAGjCF,EAAMO,kBAzLe,EA6L7BG,eAAiB,SAACV,GACd,IAAIW,EAAcP,SAASJ,EAAMC,OAAOC,OACrCS,KAAehC,EACd,EAAKe,SAAL,2BACO,EAAKb,OADZ,IAEI+B,UAAWD,EACXN,iBAAkB3B,EAAe4B,SAGrCN,EAAMO,kBApMV,EAAK1B,MAAQ,CACTgC,QAAS,GACTlF,SAAU,EACVgE,UAAW,EACXc,MAAO,GACPG,UAAWjC,EAAgBmC,OAC3BhB,UAAW,EACXiB,aAAc,KACdnB,OAAQ,GACRoB,iBAAkB,EAClBC,UAAW,EACXC,UAAW,KACXC,UAAW,EACXd,iBAAkB3B,EAAe0C,OACjCC,kBAAmB,CAAC/E,MAAO,EAAG0C,gBAAiB,EAAGC,QAAQ,EAAOC,YAAa,EAAGC,MAAO,IAhBnE,E,qDAoB7B,WAAqB,IAAD,OACZmC,EAAWC,aAAY,WACvB,EAAKC,WACL,IAAMC,EAAK,KAAS,EAAK5C,MAAM4B,MAAQ,IAAO,KACb,IAA9B,EAAK5B,MAAMgC,QAAQrF,SAAgB,IAAIkG,MAAOC,UAAY,EAAK9C,MAAMgC,QAAQ,EAAKhC,MAAMgC,QAAQrF,OAAS,GAAGoG,MAAQH,IACnH,EAAKI,kBAEV,GACHC,KAAKpC,SAAL,2BACOoC,KAAKjD,OADZ,IAEIkC,aAAcO,O,kCAItB,WACOQ,KAAKjD,MAAMkC,cACVgB,cAAcD,KAAKjD,MAAMkC,gB,sBAIjC,WACI,GAAGe,KAAKjD,MAAMwB,mBAAqB3B,EAAesD,SAAoC,OAAzBF,KAAKjD,MAAMqC,UACpEY,KAAKpC,SAAL,2BAAkBoC,KAAKjD,OAAvB,IAA8BqC,WAAW,IAAIQ,MAAOC,kBACjD,GAAGG,KAAKjD,MAAMwB,mBAAqB3B,EAAe0C,QAAmC,OAAzBU,KAAKjD,MAAMqC,UAAoB,CAC9F,IAAIC,EAAYW,KAAKjD,MAAMsC,YAAa,IAAIO,MAAOC,UAAYG,KAAKjD,MAAMqC,WAC1EY,KAAKpC,SAAL,2BAAkBoC,KAAKjD,OAAvB,IAA8BqC,UAAW,KAAMC,oBACzCW,KAAKjD,MAAMwB,mBAAqB3B,EAAe4B,OACrDwB,KAAKpC,SAAL,2BAAkBoC,KAAKjD,OAAvB,IAA8BqC,UAAW,KAAMC,UAAW,O,0BAIlE,WACI,IAAIA,EAAYW,KAAKjD,MAAMsC,UAK3B,OAJ4B,OAAzBW,KAAKjD,MAAMqC,YACVC,IAAa,IAAIO,MAAOC,UAAYG,KAAKjD,MAAMqC,WAEnDC,EAAYvF,KAAKC,MAAMsF,EAAY,KAC7B,GAAN,OAAUA,EAAV,O,2BAGJ,WACI,GAAGW,KAAKjD,MAAMwB,mBAAqB3B,EAAesD,QAAS,CACvD,IAAIC,EAASxD,EAAWqD,KAAKjD,MAAMe,OAAQkC,KAAKjD,MAAMwC,oBAC9B,IAArBY,EAAO,GAAGhD,QACT6C,KAAKpC,SAAL,2BAAkBoC,KAAKjD,OAAvB,IAA8BwB,iBAAkB3B,EAAe0C,UAEnE,IAAI7E,EAAwC,GAC5CA,EAAc,GAAD,OAAI0F,EAAO,GAAG3F,SAAW,EACtCC,EAAc,GAAD,OAAI0F,EAAO,GAAG3F,MAAQ,KAAO,EAC1CwF,KAAKpC,SAAL,2BAAkBoC,KAAKjD,OAAvB,IAA8Be,OAAQqC,EAAO,GAAIZ,kBAAmBY,EAAO,GAAIjB,iBAAkBiB,EAAO,GAAG/C,YAAa+B,UAAWgB,EAAO,GAAG9C,MACzI0B,QAAQ,GAAD,mBACAiB,KAAKjD,MAAMgC,SADX,CAEH,CACIe,MAAM,IAAIF,MAAOC,UACjB9C,MAAO,CAAEzB,SAAS,YAAK6E,EAAO,IAAKrE,OAAQ,IAC3CrB,gBACA2C,YAAa+C,EAAO,GAAG/C,YACvBC,MAAO8C,EAAO,GAAG9C,MACjB+C,WAAYJ,KAAKK,0BAGvBL,KAAKjD,MAAMwB,mBAAqB3B,EAAe4B,OACrDwB,KAAKpC,SAAL,2BACOoC,KAAKjD,OADZ,IAEIgC,QAAS,GACTjB,OAAQkC,KAAKjC,eACbmB,iBAAkB,EAClBC,UAAW,EACXI,kBAAmB,CAAC/E,MAAO,EAAG0C,gBAAiB,EAAGC,QAAQ,EAAOC,YAAa,EAAGC,MAAO,GACxFkB,iBAAkB3B,EAAe0C,Y,0BAK7C,WACI,GAAGU,KAAKjD,MAAM+B,YAAcjC,EAAgByD,cAAe,CAGvD,IAFA,IAAIC,EAAQC,MAAMC,KAAKD,MAAMR,KAAKjD,MAAMc,WAAW7C,QAAQkB,KAAI,SAAAwE,GAAC,OAAIA,EAAI,KACpEC,EAAcH,MAAMC,KAAKD,MAAMR,KAAKjD,MAAMc,WAAW7C,QACjDiB,EAAI,EAAGA,EAAInC,KAAK8G,KAAoB,IAAfL,EAAM7G,QAAgBuC,IAAK,CACpD,IAAI4E,EAAO/G,KAAKC,MAAMD,KAAKgH,SAAWH,EAAYjH,QAC9Cc,EAAQmG,EAAYI,OAAOF,EAAM,GAAG,GACpCG,EAASL,EAAY7G,KAAKC,MAAMD,KAAKgH,SAAWH,EAAYjH,SAC5D4D,EAAMiD,EAAM/F,GAChB+F,EAAM/F,GAAS+F,EAAMS,GACrBT,EAAMS,GAAU1D,EAEpB,OAAOiD,EACJ,GAAGP,KAAKjD,MAAM+B,YAAcjC,EAAgBoE,WAAY,CAC3D,IAAIV,EAAQ,GACRW,EAAYpH,KAAKC,MAAMiG,KAAKjD,MAAMc,UAAY,GACjC,IAAdqD,IAAiBA,EAAY,GAEhC,IADA,IAAIC,EAAc,EACVlF,EAAI,EAAGA,EAAI+D,KAAKjD,MAAMc,UAAW5B,KACjCA,EAAI,GAAKiF,EAAYC,IACrBA,GAAe,GAEnBZ,EAAMa,KAAKD,GAEf,OC1JL,SAAyBrE,GAE5B,IADA,IAAIyD,EAAK,YAAOzD,GACRb,EAAIsE,EAAM7G,OAAS,EAAGuC,EAAI,EAAGA,IAAK,CACtC,IAAMoF,EAAIvH,KAAKC,MAAMD,KAAKgH,UAAY7E,EAAI,IADJ,EAEf,CAACsE,EAAMc,GAAId,EAAMtE,IAAvCsE,EAAMtE,GAF+B,KAE3BsE,EAAMc,GAFqB,KAI1C,OAAOd,EDoJQe,CAAqBf,GACzB,GAAGP,KAAKjD,MAAM+B,YAAcjC,EAAgB0E,SAAU,CAEzD,IADA,IAAIhB,EAAQ,GACJtE,EAAI+D,KAAKjD,MAAMc,UAAW5B,EAAI,EAAGA,IACrCsE,EAAMa,KAAKnF,GAEf,OAAOsE,EAEP,OAAO,YAAIC,MAAMR,KAAKjD,MAAMc,YAAY3B,KAAI,kBAAMpC,KAAKC,MAAsB,IAAhBD,KAAKgH,SAAiB,Q,yBAI3F,SAAY/D,GACRiD,KAAKpC,SAAL,2BAAkBoC,KAAKjD,OAAvB,IAA8BwB,iBAAkBxB,O,oBAuEpD,WAAU,IAAD,OACDyE,EAAI,UAAMxB,KAAKjD,MAAMwC,kBAAkB/E,OACvCiH,EAAI,UAAMzB,KAAKjD,MAAMwC,kBAAkB/E,MAAQ,GAC/CC,EAAwC,GAI5C,OAHAA,EAAc+G,IAAQ,EACtB/G,EAAcgH,IAAQ,EAGlB,qBAAKhF,UAAU,MAAf,SACI,eAACiF,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,CAAKlF,UAAU,kBAAf,UACI,cAACmF,EAAA,EAAD,UACI,uBAAMnF,UAAU,WAAhB,0BAAyCuD,KAAKjD,MAAMmC,sBAExD,cAAC0C,EAAA,EAAD,UACI,uBAAMnF,UAAU,WAAhB,oBAAmCuD,KAAKjD,MAAMoC,eAElD,cAACyC,EAAA,EAAD,UACI,uBAAMnF,UAAU,WAAhB,mBAAkCuD,KAAKK,uBAG/C,cAACsB,EAAA,EAAD,CAAKlF,UAAU,kBAAf,SACI,cAACmF,EAAA,EAAD,UACI,cAAC,EAAD,CAAiBvG,KAAO,CAAEC,SAAU0E,KAAKjD,MAAMe,OAAQhC,OAAQ,IAC3DjB,MAAO,IAAMyB,OAAQ,IAAK7B,cAAeA,EAAeC,UAAW,GACnEgB,eAAgBsE,KAAKtE,eAAgBC,eAAgBqE,KAAKrE,qBAGtE,cAACgG,EAAA,EAAD,CAAKlF,UAAU,kBAAf,SACI,cAACmF,EAAA,EAAD,UACI,eAACD,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAM,EAAKC,YAAYpF,EAAesD,UAAzE,qBAEJ,cAAC0B,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAM,EAAKC,YAAYpF,EAAe0C,SAA3E,oBAEJ,cAACsC,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAM,EAAKC,YAAYpF,EAAe4B,QAA3E,qBAEJ,cAACoD,EAAA,EAAD,UACI,uBAAOK,KAAK,SAASxF,UAAU,mBAAmByF,KAAK,WAAWC,KAAK,IAAI/D,MAAO4B,KAAKjD,MAAMc,UAAWuE,SAAUpC,KAAK/B,qBAE3H,cAAC2D,EAAA,EAAD,UACI,uBAAOK,KAAK,QAAQlG,IAAI,IAAI9B,IAAI,MAAMmE,MAAO4B,KAAKjD,MAAM4B,MAAOyD,SAAUpC,KAAKtB,iBAElF,cAACkD,EAAA,EAAD,UACI,yBAAQQ,SAAUpC,KAAKpB,eAAgBR,MAAO4B,KAAKjD,MAAM+B,UAAzD,UACI,wBAAQV,MAAOvB,EAAgBmC,OAA/B,oBACA,wBAAQZ,MAAOvB,EAAgByD,cAA/B,2BACA,wBAAQlC,MAAOvB,EAAgBoE,WAA/B,wBACA,wBAAQ7C,MAAOvB,EAAgB0E,SAA/B,2C,GA9PtBc,IAAMC,WE7BTC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c9e90578.chunk.js","sourcesContent":["import { CSSProperties, useEffect, useState } from 'react';\r\nimport './ArrayVisualizer.css';\r\nimport { ProcessedValues } from '../lib/interfaces';\r\nimport { ArrayMetaData } from '../lib/types';\r\n\r\ninterface ViewSpecs {\r\n    rectStartX: number;\r\n    rectWidth: number;\r\n    rectPad: number;\r\n    maxRectHeight: number;\r\n    maxItems: number; // 119 @ 1200 width\r\n}\r\n\r\ninterface ArrayVisualizerProps {\r\n    width: number,\r\n    height: number,\r\n    list: ProcessedValues,\r\n    highlightMeta: ArrayMetaData<Boolean>,\r\n    focusMeta: ArrayMetaData<Boolean>,\r\n    handleMaxItems: (max: number) => void,\r\n    handleMaxValue: (max: number) => void\r\n}\r\n\r\nconst VIEWBOX_WIDTH = 1200;\r\nconst VIEWBOX_HEIGHT = 675;\r\nconst MIN_RECT_WIDTH = 5;\r\nconst MIN_RECT_HEIGHT = 3;\r\nconst MIN_RECT_PAD = 2.5;\r\nconst MIN_PAD = 1; // min for each side\r\nconst PAD_PERCENT = 0.1;\r\n\r\nfunction calcView(length: number): ViewSpecs {\r\n    let useableWidth = VIEWBOX_WIDTH - (MIN_PAD * 2);\r\n    let useableHeight = VIEWBOX_HEIGHT - (MIN_PAD * 2);\r\n    let maxItems = Math.floor(useableWidth / (MIN_RECT_PAD * 2 + MIN_RECT_WIDTH));\r\n    let rectPad = Math.max(MIN_PAD * 2, (useableWidth / length) * PAD_PERCENT);\r\n    let rectWidth = (useableWidth - (rectPad * length)) / length;\r\n    let rectStartX = (rectPad / 2) + (rectWidth / 2);\r\n    return {\r\n        rectStartX,\r\n        rectWidth,\r\n        rectPad,\r\n        maxRectHeight: useableHeight,\r\n        maxItems\r\n    }\r\n}\r\n\r\nfunction getIndexStyle(index: number, highlightMeta: ArrayMetaData<Boolean>, focusMeta: ArrayMetaData<Boolean>, rectWidth: number): CSSProperties {\r\n    let defaultRectStyle: CSSProperties = {\r\n        fill: 'rgb(66, 135, 245)',\r\n        width: `${rectWidth}px`\r\n    };\r\n    let highlightedRectStyle: CSSProperties = {\r\n        fill: 'rgb(219, 132, 39)',\r\n        width: `${rectWidth}`\r\n    }\r\n    return Object.keys(highlightMeta).includes(`${index}`) ? highlightedRectStyle : defaultRectStyle;\r\n}\r\n\r\nfunction buildSVGRects(items: ProcessedValues, viewSpecs: ViewSpecs, highlightMeta: ArrayMetaData<Boolean>, focusMeta: ArrayMetaData<Boolean>): JSX.Element[] {\r\n    if(items.scaled.length !== items.original.length) {\r\n        const min = Math.min(...items.original);\r\n        const max = Math.max(...items.original);\r\n        let normalized = [...items.original];\r\n        for(let i = 0; i < normalized.length; i++) {\r\n            normalized[i] = (normalized[i] - min) / (max - min); // normalize\r\n            normalized[i] = normalized[i] * viewSpecs.maxRectHeight; // scale\r\n            if(normalized[i] < MIN_RECT_HEIGHT) { // ensure each item is visible\r\n                normalized[i] = MIN_RECT_HEIGHT; // TODO: fix min scale issue, 0 !== 1 !== 2, !== 3... ect\r\n            }\r\n        }\r\n        items.scaled = normalized;\r\n    }\r\n    return items.scaled.map((item, index) => {\r\n        return (\r\n            <rect key={`${index}`}\r\n                x={viewSpecs.rectPad / 2 + (viewSpecs.rectPad + viewSpecs.rectWidth) * index}\r\n                y={VIEWBOX_HEIGHT - item} height={item} style={getIndexStyle(index, highlightMeta, focusMeta, viewSpecs.rectWidth)} />\r\n        )\r\n    });\r\n}\r\n\r\nfunction ArrayVisualizer(props: ArrayVisualizerProps) {\r\n    const [viewSpecs, setViewSpecs] = useState<ViewSpecs>(calcView(props.list.original.length));\r\n\r\n    useEffect(() => {\r\n        setViewSpecs(calcView(props.list.original.length));\r\n    }, [props]);\r\n\r\n    useEffect(() => {\r\n        props.handleMaxItems(viewSpecs.maxItems);\r\n        props.handleMaxValue(viewSpecs.maxRectHeight);\r\n    }, [viewSpecs]);\r\n\r\n    let rects = buildSVGRects(props.list, viewSpecs, props.highlightMeta, props.focusMeta);\r\n\r\n    return (\r\n        <div>\r\n            <svg className=\".svg-view\" viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`} width={`${props.width}`} height={`${props.height}`}>\r\n                { rects }\r\n                Warning: Your browser does not support SVG.\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ArrayVisualizer;\r\n","/**\r\n * Bubble Sort\r\n * \r\n * Changes the state of input array to the next state of output array after a single cycle.\r\n */\r\n\r\nexport interface BubbleSortState {\r\n    index: number;\r\n    completedIndex: number;\r\n    isDone: boolean;\r\n    comparisons: number;\r\n    swaps: number;\r\n}\r\n\r\nfunction BubbleSort(input: number[], state: BubbleSortState): [number[], BubbleSortState] {\r\n    let nextInput = [...input];\r\n\r\n    let nextState = null;\r\n    if(state.completedIndex === -1) { // set state if state === undefined\r\n        nextState = {\r\n            index: 0,\r\n            completedIndex: nextInput.length,\r\n            isDone: false,\r\n            comparisons: 0,\r\n            swaps: 0\r\n        };\r\n    } else {\r\n        nextState = {...state};\r\n    }\r\n\r\n    if(nextState.isDone) {\r\n        return [nextInput, nextState];\r\n    }\r\n\r\n    if(nextInput[nextState.index] > nextInput[nextState.index + 1]) { // swap is out of order\r\n        let tmp = nextInput[nextState.index];\r\n        nextInput[nextState.index] = nextInput[nextState.index + 1];\r\n        nextInput[nextState.index + 1] = tmp;\r\n        nextState.swaps += 1;\r\n    }\r\n\r\n    nextState.index += 1;\r\n    nextState.comparisons += 1;\r\n    if(nextState.index > nextInput.length - 2 || nextState.index >= nextState.completedIndex) { // '-2' since -1 since index starts at 0 && index should not go to last element\r\n        nextState.index = 0;\r\n        nextState.completedIndex -= 1;\r\n        if(nextState.completedIndex === 0) {\r\n            nextState.isDone = true;\r\n        }\r\n    }\r\n\r\n    return [nextInput, nextState];\r\n}\r\n\r\nexport default BubbleSort;","import React from 'react';\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport ArrayVisualizer from './components/ArrayVisualizer';\r\nimport { ProcessedValues, HistoryObject } from './lib/interfaces';\r\nimport { ArrayMetaData } from './lib/types';\r\nimport './App.css';\r\nimport BubbleSort, { BubbleSortState } from './sorters/BubbleSort';\r\nimport { isNumeric, shuffleArray } from './lib/helpers';\r\n\r\nenum AlgorithmState {\r\n    PAUSED,\r\n    RUNNING,\r\n    RESET\r\n}\r\n\r\nenum RandomArrayType {\r\n    RANDOM,\r\n    NEARLY_SORTED,\r\n    FEW_UNIQUE,\r\n    REVERSED\r\n}\r\n\r\ninterface AppProps {\r\n\r\n}\r\n\r\ninterface AppState {\r\n    history: HistoryObject[];\r\n    maxItems: number;\r\n    itemCount: number;\r\n    speed: number;\r\n    arrayType: RandomArrayType;\r\n    maxHeight: number;\r\n    intervalCall: NodeJS.Timeout | null;\r\n    values: number[];\r\n    comparisonsCount: number;\r\n    swapCount: number;\r\n    startTime: number | null;\r\n    totalTime: number;\r\n    internalSortState: BubbleSortState;\r\n    applicationState: AlgorithmState\r\n};\r\n\r\nclass App extends React.Component<AppProps, AppState> {\r\n    constructor(props: AppProps) {\r\n        super(props);\r\n        this.state = {\r\n            history: [],\r\n            maxItems: 0,\r\n            itemCount: 0,\r\n            speed: 50,\r\n            arrayType: RandomArrayType.RANDOM,\r\n            maxHeight: 0,\r\n            intervalCall: null,\r\n            values: [],\r\n            comparisonsCount: 0,\r\n            swapCount: 0,\r\n            startTime: null,\r\n            totalTime: 0,\r\n            applicationState: AlgorithmState.PAUSED,\r\n            internalSortState: {index: 0, completedIndex: -1, isDone: false, comparisons: 0, swaps: 0}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let interval = setInterval(() => {\r\n            this.calcTime();\r\n            const ms = 1000 / ((this.state.speed / 100) * 50); // how many ms before next sort state\r\n            if(this.state.history.length === 0 || new Date().getTime() - this.state.history[this.state.history.length - 1].time >= ms) {\r\n                this.nextSortState();\r\n            }\r\n        }, 3);\r\n        this.setState({\r\n            ...this.state,\r\n            intervalCall: interval\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if(this.state.intervalCall) {\r\n            clearInterval(this.state.intervalCall);\r\n        }\r\n    }\r\n\r\n    calcTime() {\r\n        if(this.state.applicationState === AlgorithmState.RUNNING && this.state.startTime === null) {\r\n            this.setState({...this.state, startTime: new Date().getTime()});\r\n        } else if(this.state.applicationState === AlgorithmState.PAUSED && this.state.startTime !== null) {\r\n            let totalTime = this.state.totalTime + (new Date().getTime() - this.state.startTime);\r\n            this.setState({...this.state, startTime: null, totalTime});\r\n        } else if(this.state.applicationState === AlgorithmState.RESET) {\r\n            this.setState({...this.state, startTime: null, totalTime: 0});\r\n        }\r\n    }\r\n\r\n    getTotalTime(): string {\r\n        let totalTime = this.state.totalTime;\r\n        if(this.state.startTime !== null) {\r\n            totalTime += new Date().getTime() - this.state.startTime;\r\n        }\r\n        totalTime = Math.floor(totalTime / 1000);\r\n        return `${totalTime}s`;\r\n    }\r\n\r\n    nextSortState() {\r\n        if(this.state.applicationState === AlgorithmState.RUNNING) {\r\n            let result = BubbleSort(this.state.values, this.state.internalSortState);\r\n            if(result[1].isDone === true) {\r\n                this.setState({...this.state, applicationState: AlgorithmState.PAUSED});\r\n            }\r\n            let highlightMeta: ArrayMetaData<boolean> = {};\r\n            highlightMeta[`${result[1].index}`] = true;\r\n            highlightMeta[`${result[1].index + 1}`] = true;\r\n            this.setState({...this.state, values: result[0], internalSortState: result[1], comparisonsCount: result[1].comparisons, swapCount: result[1].swaps,\r\n                history: [\r\n                    ...this.state.history,\r\n                    {\r\n                        time: new Date().getTime(),\r\n                        state: { original: [...result[0]], scaled: [] },\r\n                        highlightMeta,\r\n                        comparisons: result[1].comparisons,\r\n                        swaps: result[1].swaps,\r\n                        timePassed: this.getTotalTime()\r\n                    }\r\n                ]});\r\n        } else if(this.state.applicationState === AlgorithmState.RESET) {\r\n            this.setState({\r\n                ...this.state,\r\n                history: [],\r\n                values: this.getRandArray(),\r\n                comparisonsCount: 0,\r\n                swapCount: 0,\r\n                internalSortState: {index: 0, completedIndex: -1, isDone: false, comparisons: 0, swaps: 0},\r\n                applicationState: AlgorithmState.PAUSED\r\n            });\r\n        }\r\n    }\r\n\r\n    getRandArray(): number[] {\r\n        if(this.state.arrayType === RandomArrayType.NEARLY_SORTED) {\r\n            let array = Array.from(Array(this.state.itemCount).keys()).map(v => v + 1);\r\n            let openIndices = Array.from(Array(this.state.itemCount).keys()); // indexes not choosen to be randomized yet\r\n            for(let i = 0; i < Math.ceil(array.length * 0.15); i++) {\r\n                let rand = Math.floor(Math.random() * openIndices.length);\r\n                let index = openIndices.splice(rand, 1)[0];\r\n                let index2 = openIndices[Math.floor(Math.random() * openIndices.length)];\r\n                let tmp = array[index];\r\n                array[index] = array[index2];\r\n                array[index2] = tmp;\r\n            }\r\n            return array;\r\n        } else if(this.state.arrayType === RandomArrayType.FEW_UNIQUE) {\r\n            let array = [];\r\n            let maxRepeat = Math.floor(this.state.itemCount / 5);\r\n            if(maxRepeat === 1) maxRepeat = 2;\r\n            let repeatValue = 1;\r\n            for(let i = 0; i < this.state.itemCount; i++) {\r\n                if((i + 1) / maxRepeat > repeatValue) {\r\n                    repeatValue += 1;\r\n                }\r\n                array.push(repeatValue);\r\n            }\r\n            return shuffleArray<number>(array);\r\n        } else if(this.state.arrayType === RandomArrayType.REVERSED) {\r\n            let array = [];\r\n            for(let i = this.state.itemCount; i > 0; i--) {\r\n                array.push(i);\r\n            }\r\n            return array;\r\n        } else { // RandomArrayType.RANDOM\r\n            return [...Array(this.state.itemCount)].map(() => Math.floor(Math.random() * 100 + 1));\r\n        }\r\n    }\r\n\r\n    setAppState(state: AlgorithmState) {\r\n        this.setState({...this.state, applicationState: state});\r\n    }\r\n\r\n    handleMaxItems = (max: number): void => {\r\n        if(max > 100) { // TODO: move this to array visualizer\r\n            max = 100;\r\n        }\r\n        if(max !== this.state.maxItems) {\r\n            this.setState({\r\n                ...this.state,\r\n                maxItems: max,\r\n                itemCount: max\r\n            }, () => {\r\n                this.setState({\r\n                    ...this.state,\r\n                    values: this.getRandArray()\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n    handleMaxValue = (max: number): void => {\r\n        if(max !== this.state.maxHeight) {\r\n            this.setState({\r\n                ...this.state,\r\n                maxHeight: max\r\n            })\r\n        }\r\n    }\r\n\r\n    handleItemChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        if(isNumeric(event.target.value)) {\r\n            let n = parseInt(event.target.value);\r\n            if(n >= 5 && n <= this.state.maxItems) {\r\n                this.setState({\r\n                    ...this.state,\r\n                    itemCount: n,\r\n                    applicationState: AlgorithmState.RESET\r\n                });\r\n            } else {\r\n                event.preventDefault();\r\n            }\r\n        } else {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleSlider = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n        if(isNumeric(event.target.value)) {\r\n            this.setState({\r\n                ...this.state,\r\n                speed: parseInt(event.target.value)\r\n            });\r\n        } else {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    handleDropDown = (event: React.ChangeEvent<HTMLSelectElement>): void => {\r\n        let parsedValue = parseInt(event.target.value);\r\n        if(parsedValue in RandomArrayType) {\r\n            this.setState({\r\n                ...this.state,\r\n                arrayType: parsedValue,\r\n                applicationState: AlgorithmState.RESET\r\n            });\r\n        } else {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let key1 = `${this.state.internalSortState.index}`; // TODO: put metadata generation inside algorithm\r\n        let key2 = `${this.state.internalSortState.index + 1}`;\r\n        let highlightMeta: ArrayMetaData<Boolean> = {};\r\n        highlightMeta[key1] = true;\r\n        highlightMeta[key2] = true;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <Container>\r\n                    <Row className=\"text-center m-3\">\r\n                        <Col>\r\n                            <span className=\"app-text\">Comparisons: {this.state.comparisonsCount}</span>\r\n                        </Col>\r\n                        <Col>\r\n                            <span className=\"app-text\">Swaps: {this.state.swapCount}</span>\r\n                        </Col>\r\n                        <Col>\r\n                            <span className=\"app-text\">Time: {this.getTotalTime()}</span>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"text-center m-3\">\r\n                        <Col>\r\n                            <ArrayVisualizer list={ { original: this.state.values, scaled: [] } }\r\n                                width={1000} height={600} highlightMeta={highlightMeta} focusMeta={{}}\r\n                                handleMaxItems={this.handleMaxItems} handleMaxValue={this.handleMaxValue} />\r\n                        </Col>\r\n                    </Row>\r\n                    <Row className=\"text-center m-3\">\r\n                        <Col>\r\n                            <Row>\r\n                                <Col>\r\n                                    <Button variant=\"primary\" onClick={() => this.setAppState(AlgorithmState.RUNNING)}>Start</Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button variant=\"secondary\" onClick={() => this.setAppState(AlgorithmState.PAUSED)}>Stop</Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Button variant=\"secondary\" onClick={() => this.setAppState(AlgorithmState.RESET)}>Reset</Button>\r\n                                </Col>\r\n                                <Col>\r\n                                    <input type=\"number\" className=\"elements-counter\" name=\"elements\" step=\"5\" value={this.state.itemCount} onChange={this.handleItemChange} />\r\n                                </Col>\r\n                                <Col>\r\n                                    <input type=\"range\" min=\"1\" max=\"100\" value={this.state.speed} onChange={this.handleSlider} />\r\n                                </Col>\r\n                                <Col>\r\n                                    <select onChange={this.handleDropDown} value={this.state.arrayType}>\r\n                                        <option value={RandomArrayType.RANDOM}>Random</option>\r\n                                        <option value={RandomArrayType.NEARLY_SORTED}>Nearly Sorted</option>\r\n                                        <option value={RandomArrayType.FEW_UNIQUE}>Few Unique</option>\r\n                                        <option value={RandomArrayType.REVERSED}>Reversed</option>\r\n                                    </select>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n\r\nexport default App;\r\n","export function isNumeric(str: string): boolean {\r\n    if(typeof str !== \"string\") {\r\n        return false;\r\n    }\r\n    return !Number.isNaN(Number(str));\r\n}\r\n\r\n// Durstenfeld Shuffle modified from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\r\nexport function shuffleArray<T>(input: T[]): T[] {\r\n    let array = [...input];\r\n    for(let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}